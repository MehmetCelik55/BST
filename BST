class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

class BST:
    def __init__(self):
        self.root = None

    def insert(self, root, key):
        if root is None:
            return Node(key)
        elif key < root.key:
            root.left = self.insert(root.left, key)
        else:
            root.right = self.insert(root.right, key)
        return root
elements = [15, 8, 6, 25, 26, 1, 2, 10, 3, 30]
tree = BST()
root = None
for el in elements:
    root = tree.insert(root, el)
def draw_tree(root, level=0):
    if root is not None:
        draw_tree(root.right, level + 1)
        print(' ' * 4 * level + '->', root.key)
        draw_tree(root.left, level + 1)
for el in elements:
    root = tree.insert(root, el)
    print(f"Element {el} added to the tree:")
    draw_tree(root)
    print("\n")
def inorder(root):
    return inorder(root.left) + [root.key] + inorder(root.right) if root else []
def preorder(root):
    return [root.key] + preorder(root.left) + preorder(root.right) if root else []
def postorder(root):
    return postorder(root.left) + postorder(root.right) + [root.key] if root else []
print("Inorder:", inorder(root))
print("Preorder:", preorder(root))
print("Postorder:", postorder(root))
